var documenterSearchIndex = {"docs":
[{"location":"numerics/timestepping.html#Timestepping","page":"Timestepping","title":"Timestepping","text":"","category":"section"},{"location":"numerics/timestepping.html","page":"Timestepping","title":"Timestepping","text":"Once we have solved for the velocity, the ice thickness is stepped according to:","category":"page"},{"location":"references.html","page":"References","title":"References","text":"","category":"page"},{"location":"data_structure/overview.html#Data-Structure","page":"Overview","title":"Data Structure","text":"","category":"section"},{"location":"data_structure/overview.html","page":"Overview","title":"Overview","text":"WAVI.jl uses a hierachical data structure, which is shown schematically below. This page provides a brief overview of each of these structures; you can find out more information about each of these via the tabs in the sidebar.","category":"page"},{"location":"data_structure/overview.html","page":"Overview","title":"Overview","text":"<center><img src=\"../assets/structure_flowchart.jpeg\" alt=\"\" title=\"\" width=\"500\" height=\"400\" /></center>","category":"page"},{"location":"data_structure/overview.html","page":"Overview","title":"Overview","text":"At the top of the hierarchy are Simulations. Simulations are to be ran! A Simulation object must be passed the sub-structures describing the following (terms in brackets are the names of the corresponding structures in WAVI.jl):","category":"page"},{"location":"data_structure/overview.html","page":"Overview","title":"Overview","text":"Model (Model):  contains all the information about the current state, parameters, initial conditions, and process parametrizations (see below).\nTimestepping Parameters (TimesteppingParams): contains parameters relating to timestepping (e.g. timestep, number of timesteps etc)\nOutput Parameters (OutputParams): optional structure that contains information relativng to the outputting of solutions (what to output, when to output etc).","category":"page"},{"location":"data_structure/overview.html","page":"Overview","title":"Overview","text":"A Model structure contains sub-structures describing the following:","category":"page"},{"location":"data_structure/overview.html","page":"Overview","title":"Overview","text":"Grid (Grid): contains information on the discretization of the model domain (e.g. number of grid cells, grid spacing etc)\nPhysical parameters (Params): contains physical parameters (e.g. density of the ice)\nSolver parameters (SolverParams): contains parameters relating to the velocity solver (e.g. maximum number of iterations)\nInitial conditions (InitialConditions): stores initial conditions relating to the ice sheet.\nFields (Fields): stores information on the current state of the model.","category":"page"},{"location":"data_structure/overview.html","page":"Overview","title":"Overview","text":"A Model also owns a dict named extra_physics, which contains information on parametrizations of physical processes used by the model. See the Parametrizations tab on the left for more information.","category":"page"},{"location":"physics/melting.html#Melt-Rates","page":"Melt Rates","title":"Melt Rates","text":"","category":"section"},{"location":"physics/melting.html","page":"Melt Rates","title":"Melt Rates","text":"WAVI.jl includes a number of community melt rate parametrizations of melt rate:","category":"page"},{"location":"physics/melting.html","page":"Melt Rates","title":"Melt Rates","text":"'Analytic' parametrizations \nInput file melt rates \nQuadratic temperature parametrization\nPlume emulator parametrization\nPICO parametrization\nPICOp parametrization","category":"page"},{"location":"physics/melting.html","page":"Melt Rates","title":"Melt Rates","text":"Further details of these parametrizations can be found on this page.  For details of their use in WAVI.jl, see the melt rate models section. We strongly encourage those who have developed melt rate parametrizations to consider implementing them in WAVI.jl; if you are interested in doing so, see the melt rate models and contributors guide(../contributing.md), or get in touch.","category":"page"},{"location":"physics/melting.html","page":"Melt Rates","title":"Melt Rates","text":"WAVI.jl also supports coupling to the ocean model MITgcm. Please get in touch, or see the MITgcm coupling tab if you are interested in running coupled WAVI.jl-MITgcm simulations.","category":"page"},{"location":"physics/melting.html#Analytic-Melt-Rate-Parametrizations","page":"Melt Rates","title":"Analytic Melt Rate Parametrizations","text":"","category":"section"},{"location":"physics/melting.html#Input-File-Melt-Rates","page":"Melt Rates","title":"Input File Melt Rates","text":"","category":"section"},{"location":"physics/melting.html#Quadratic-Temperature-Melt-Rate-Parametrization","page":"Melt Rates","title":"Quadratic Temperature Melt Rate Parametrization","text":"","category":"section"},{"location":"physics/melting.html","page":"Melt Rates","title":"Melt Rates","text":"The quadratic temperature melt rate parametrization [P R Holland, A Jenkins, D M Holland (2008)] parametrizes the melt rate as a quadratic function of the thermal driving:","category":"page"},{"location":"physics/melting.html","page":"Melt Rates","title":"Melt Rates","text":"beginequationlabelEquadratic_parametrization\r\nM = gamma_T left( fracrho_w c_prho_i L right) left(T_0 - T_fright)^2\r\nendequation","category":"page"},{"location":"physics/melting.html","page":"Melt Rates","title":"Melt Rates","text":"Here gamma_T is a heat exchange velocity, rho_w is the density of water, rho_i is the density of ice, c_p is the heat capacity of the ocean, L is the latent heat of fusion of ice. In addition, T_f = lambda_1 S_0 + lambda_2 + lambda_3 z_b is the local freezing point, with lambda_1, lambda_2, and lambda_3 the liquidus slope, intercept, and pressure coefficient, respectively, and z_b the height of the ice shelf draft above sea level (i.e. z_b is negative).  T_0 and S_0 are the depth-dependent potential temperatre and practical salinity taken from the far field.","category":"page"},{"location":"physics/melting.html","page":"Melt Rates","title":"Melt Rates","text":"The quadratic formulation \\eqref{E:quadratic_parametrization} attempts to account for heat providing both more heat for melting and the feedback between sub-shelf melting and circulation in the cavity (higher temperatures result in a more vigorous circulation, promoting enhanced melt rates).","category":"page"},{"location":"physics/melting.html#Plume-Emulator-Melt-Rate-Parametrization","page":"Melt Rates","title":"Plume Emulator Melt Rate Parametrization","text":"","category":"section"},{"location":"physics/melting.html#PICO-Melt-Rate-Parametrization","page":"Melt Rates","title":"PICO Melt Rate Parametrization","text":"","category":"section"},{"location":"physics/melting.html#PICOp-Melt-Rate-Parametrization","page":"Melt Rates","title":"PICOp Melt Rate Parametrization","text":"","category":"section"},{"location":"installation_instructions.html#Installation-instructions","page":"Installation instructions","title":"Installation instructions","text":"","category":"section"},{"location":"installation_instructions.html","page":"Installation instructions","title":"Installation instructions","text":"You can install the latest version of WAVI using the built-in package manager (accessed by pressing ] in the Julia command prompt) to add the package and instantiate/build all dependencies","category":"page"},{"location":"installation_instructions.html","page":"Installation instructions","title":"Installation instructions","text":"julia>]\r\n(v1.6) pkg> add https://github.com/RJArthern/WAVI.jl\r\n(v1.6) pkg> instantiate","category":"page"},{"location":"installation_instructions.html","page":"Installation instructions","title":"Installation instructions","text":"Note that WAVI is only tested on Julia versions 1.5 and newer; stability cannot be guaranteed on newer versions!","category":"page"},{"location":"installation_instructions.html","page":"Installation instructions","title":"Installation instructions","text":"At this time, updating should be done with care, as WAVI is under rapid development. While we take care to avoid breaking changes, they may happen during this time. If anything does break, please open an issue and let us know!","category":"page"},{"location":"numerics/discretization.html#Discretization","page":"Discretization","title":"Discretization","text":"","category":"section"},{"location":"numerics/discretization.html","page":"Discretization","title":"Discretization","text":"To include here:","category":"page"},{"location":"numerics/discretization.html","page":"Discretization","title":"Discretization","text":"Brief details of how the momentum equations are transformed into a problem mathbfL(mathbfbaru) = mathbff if the viscosity is known (and say that in practice, we iterate to find the viscosity, see velocity solve)\nDiscretization of this problem (write down matrix problem and operators)","category":"page"},{"location":"physics/overview.html#Overview","page":"Overview and Background","title":"Overview","text":"","category":"section"},{"location":"physics/overview.html","page":"Overview and Background","title":"Overview and Background","text":"WAVI.jl is a software package for the numerical solution of the hybrid equations describing the evolution of ice sheet thickness h and velocity mathbfu = (uv). Hybrid models assume that ice sheet stresses are depth independent, but vertical velocity gradients are included in the non-linear viscosity and treatment of basal stress. This means that unlike models that make the shallow-ice or shallow-shelf approximations, they are appropriate to describe both regions of fast and slow ice flow, while being computationally two-dimensional and thus far less expensive than full Stokes models. See our background to ice sheet models below. ","category":"page"},{"location":"physics/overview.html#Background-to-Ice-Sheet-Models","page":"Overview and Background","title":"Background to Ice Sheet Models","text":"","category":"section"},{"location":"physics/overview.html","page":"Overview and Background","title":"Overview and Background","text":"Some info on different ice sheet models...","category":"page"},{"location":"physics/overview.html#Full-Stokes-Models","page":"Overview and Background","title":"Full Stokes Models","text":"","category":"section"},{"location":"physics/overview.html#Hybrid-Models","page":"Overview and Background","title":"Hybrid Models","text":"","category":"section"},{"location":"physics/overview.html#Shallow-Ice-Models","page":"Overview and Background","title":"Shallow Ice Models","text":"","category":"section"},{"location":"physics/overview.html#Shallow-Shelf-Models","page":"Overview and Background","title":"Shallow Shelf Models","text":"","category":"section"},{"location":"physics/calving.html#Calving","page":"Calving","title":"Calving","text":"","category":"section"},{"location":"physics/calving.html","page":"Calving","title":"Calving","text":"Coming soon!","category":"page"},{"location":"numerics/velocity_solve.html#Velocity-Solve","page":"Velocity Solve","title":"Velocity Solve","text":"","category":"section"},{"location":"numerics/velocity_solve.html","page":"Velocity Solve","title":"Velocity Solve","text":"How do we solve the discretized velocity equation? Step by step:","category":"page"},{"location":"numerics/velocity_solve.html","page":"Velocity Solve","title":"Velocity Solve","text":"Schur decomposition\nPrecondition\nIterative method (Picard iteration)\nIteration on viscosity","category":"page"},{"location":"numerics/velocity_solve.html","page":"Velocity Solve","title":"Velocity Solve","text":"","category":"page"},{"location":"data_structure/timestepping_params.html#Timestepping-Parameters","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"","category":"section"},{"location":"data_structure/timestepping_params.html#Overview","page":"Timestepping Parameters","title":"Overview","text":"","category":"section"},{"location":"data_structure/timestepping_params.html","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"A TimesteppingParams structure is used to pass information relating to timestepping to the simulation. The following parameters as specified by passing appropriate keyword arguments the TimesteppingParams constructor:","category":"page"},{"location":"data_structure/timestepping_params.html","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"niter0: the iteration number at which the simulation. Set niter0 to 0 to initialize a 'clean' simulation, or niter0 to a positive integer to (attempt to) pickup from the a corresponding checkpoint (see Checkpoints and Pickups below)\ndt: the simulation timestep\nend_time: the clock time at which the simulation should terminate\nn_iter_total: the total number of timesteps to be performed. NB: you must specify at least one of end_time and n_iter_total (the simulation must know when it is going to finish!); specifying both is possible, but they must be compatible (i.e the end_time must equal n_iter_total * dt).\nchkpt_freq and pchkpt_freq: the model time interval between outputting temporary and permanent checkpoints, respectively (see Checkpoints and Pickups)\nstep_thickness: a flag which, when turned off (stepthickness = false) turns of thickness updates when timestepping. This is an experimental feature, necessary for coupling WAVI to the MITgcm (see the MITgcm coupling for more info)","category":"page"},{"location":"data_structure/timestepping_params.html#Constructor","page":"Timestepping Parameters","title":"Constructor","text":"","category":"section"},{"location":"data_structure/timestepping_params.html","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"An instance of a TimesteppingParams is constucted using the TimesteppingParams(;<kwargs>) constructor:","category":"page"},{"location":"data_structure/timestepping_params.html","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"TimesteppingParams()","category":"page"},{"location":"data_structure/timestepping_params.html#WAVI.TimesteppingParams-Tuple{}","page":"Timestepping Parameters","title":"WAVI.TimesteppingParams","text":"TimesteppingParams(;<kwargs>)\n\nConstruct a WAVI.jl TimesteppingParams object, which stores parameters relating to timestepping.\n\nKeyword arguments\n\nniter0: Iteration number of the first timestep. niter0 = 0 corresponds to a new simulation, while niter0 > 0 (positive integer) corresponds to a pickup.\ndt: simulation timestep\nend_time: Simulation termination time\nt0: Starting time of the simulation\nchkpt_freq: model time interval at which temporary checkpoints are outputted\npchkpt_freq: model time interval at which permanent checkpoints are outputted\nchkpt_path : Path to location checkpoint output\nstep_thickness: Toggle whether to update the ice thickness (true) or not (false) at each timestep\n\n\n\n\n\n","category":"method"},{"location":"data_structure/timestepping_params.html#Checkpoints-and-Pickups","page":"Timestepping Parameters","title":"Checkpoints and Pickups","text":"","category":"section"},{"location":"data_structure/timestepping_params.html","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Large simulations are computationally expensive, and may take a long time to run. To permit simulations to run for longer than maximum runtime limits which are imposed on many machines, WAVI.jl is equipped with a checkpoint-pickup system that allows the state to be outputted frequently, and the simulation to be picked again from that point. ","category":"page"},{"location":"data_structure/timestepping_params.html#Checkpoints","page":"Timestepping Parameters","title":"Checkpoints","text":"","category":"section"},{"location":"data_structure/timestepping_params.html","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Checkpoints contain a snapshot of all of the information on the current state of the simulation. As a result, they may be large and thus outputting checkpoints very frequently is discouraged, except for when debugging simulations which are ran for only a few timesteps (see Simulation Tips)","category":"page"},{"location":"data_structure/timestepping_params.html","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Both temporary and permanent checkpoints are output in jld2 format. The path of both of these is specified by setting the chkpt_path argument in the TimesteppingParams constructor.","category":"page"},{"location":"data_structure/timestepping_params.html","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Temporary checkpoints are outputted every chkpt_freq years (model time). These checkpoints are rolling: first checkpoint 'A' (named chkptA.jld) is written at time chkpt_freq, then checkpoint 'B' (named chkptB.jld) is output at a time 2 * chkpt_freq. Checkpoint 'A' is overwritten at time 3 * chkpt_freq, and so on.","category":"page"},{"location":"data_structure/timestepping_params.html","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Similarly, permanent checkpoints are outputted every pchkpt_freq model years.  These are output sequentially (i.e. not overwritten) as pchkpt_xxxxxxxxx.jld2 where xxxxxxxxxx is the iteration number, prepended by zeros to be ten digits long (e.g. the filename of a checkpoint outputted at timestep number one thousand is chkpt_0000001000.jld).","category":"page"},{"location":"data_structure/timestepping_params.html","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Note that the number of timesteps, rather than the model time, is used to determine when to output the solution: permanent checkpoints are output every floor(pchkpt_freq / dt) timesteps (and similarly for chkpt_freq), so the actual output frequency may not exaclty match that specified by the parameter. ","category":"page"},{"location":"data_structure/timestepping_params.html#Pickups","page":"Timestepping Parameters","title":"Pickups","text":"","category":"section"},{"location":"data_structure/timestepping_params.html","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Continuining from the state stored in a checkpoint is initiatied by setting the niter0 parameter to correspond to the number of the timestep to be picked up from. For example, to continue the simulation from a checkpoint outputted at timestep number one thousand, set niter0 = 1000 in the TimesteppingParams constructor.  ","category":"page"},{"location":"data_structure/timestepping_params.html","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"WAVI.jl only currently supports pickups from permanent checkpoints. The permanent checkpoint from which a pickup is initiated must be in the local directory.","category":"page"},{"location":"data_structure/timestepping_params.html","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"note: Note\nAfter a pickup, WAVI.jl uses the model that was specified in the original simulation that produced the checkpoint. However, to retain the simulation structure, a model must still be passed to simulation Similarly, after picking up, output_params will be as specified in the original simulation that produced the checkpoint. To force a simulation to update to the model and/or output parameters to those just passed, use the pickup_model_update_flag and/or pickup_output_update_flag flags in the simulation constructor (see Simulations). TimesteppingParams are always updated after a pickup.  ","category":"page"},{"location":"physics/governing_equations.html#Governing-Equations","page":"Governing Equations","title":"Governing Equations","text":"","category":"section"},{"location":"physics/governing_equations.html#Preliminaries","page":"Governing Equations","title":"Preliminaries","text":"","category":"section"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"WAVI.jl uses a Cartesian co-ordinate system mathbfx = (xyz), with z positive upwards; the corresponding velocity components are mathbfu = (uvw). We use bar notation to denote depth averaged quantities, for example:","category":"page"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"    beginequation\r\n        barf =frac1h int_z = b(xy)^z = s(xyt)fmathrmdz\r\n    endequation","category":"page"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"is the depth average of the quantity f. Here, t is the denotes time, b(xy) is the (known) bed elevation (measured positive upwards), and s(xyt) is the surface elevation. ","category":"page"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"We assume that the ice is in hydrostratic equilibrium, so that regions are with h  -(rho_irho_w) b are floating, and regions with h geq -(rho_irho_w) b are grounded, where rho_i and rho_w the ice and ocean density, respectively.  Where the ice is grounded, we have s = h + b, while where the ice is floating, the hydrostratic assumption enforces s = (1 - rho_irho_w)h.","category":"page"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"WAVI.jl solves equations describing conservation of momentum and conservation of mass for mathbfbaru(xyt) = (baru(xyt) barv(xyt)), the depth averaged velocity components in the (xy) directions, respectively, and the ice thickness h(xyt)","category":"page"},{"location":"physics/governing_equations.html#Conservation-of-Momentum","page":"Governing Equations","title":"Conservation of Momentum","text":"","category":"section"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"Conservation of momentum requires that the baru and barv satisfy (D N Goldberg (2011)):","category":"page"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"beginalign\r\n    fracpartialpartial xleft(4 baretah fracpartial barupartial x + 2 baretah fracpartial barvpartial y)right) +    fracpartialpartial yleft(baretah fracpartial barvpartial x +  baretah fracpartial barupartial yright) - tau_bx = rho_i g h fracpartial spartial x labelEx-momentum\r\n    fracpartialpartial yleft(4 baretah fracpartial barvpartial y + 2 baretah fracpartial barupartial x)right) +    fracpartialpartial xleft(baretah fracpartial barupartial y +  baretah fracpartial barvpartial xright) - tau_by = rho_i g h fracpartial spartial ylabelEy-momentum\r\nendalign","category":"page"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"where rho_i is the ice density, g is the gravitational acceleration, mathbftau_b = (tau_bx tau_by) is the basal drag in the (xy) directions (see basal stress), and eta is the ice viscosity, defined implicity in terms of the velocity components (the strain components are themselves functions of eta, see below):","category":"page"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"beginequationlabelEviscosity\r\n    eta = fracB2 leftleft(fracpartial barupartial xright)^2  + left(fracpartial barvpartial yright)^2 + fracpartial barupartial xfracpartial barvpartial y + frac14left( fracpartial barupartial y + fracpartial barupartial xright)^2 + frac14left(fracpartial barupartial zright)^2 + left(fracpartial barvpartial zright)^2 + epsilon^2right^frac1-n2n\r\nendequation","category":"page"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"Here n is the exponent in a nonlinear Glen flow law, epsilon is a regularization parameter that prevents the viscosity becoming unbounded at small strain rates (for small strain rates, eta is constant, corresponding to a linear rheology), and B(xyz) is a temperature-dependent coefficient that determines the stiffness of the ice. ","category":"page"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"The momentum equations are solved alongside boundary conditions at the lateral boundary of the ice sheet,","category":"page"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"    beginalign\r\n        -frac12rho_w  h_w^2 hatn_x = 2baretahleft(2 fracpartial barupartial x + fracpartial barvpartial yright)hatn_y - frac12rho_i g h^2 hatn_x + baretah left(fracpartial barupartial y + fracpartial barvpartial xright)hatn_ylabelEbc1\r\n        -frac12rho_w  h_w^2 hatn_y = 2baretahleft(2 fracpartial barvpartial y + fracpartial barupartial xright)hatn_y - frac12rho_i g h^2 hatn_y + baretah left(fracpartial barupartial y + fracpartial barvpartial xright)hatn_x labelEbc2\r\n     endalign","category":"page"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"which impose continuity of depth-integrated there. In \\eqref{E:bc1}–\\eqref{E:bc2}, h_w = max(h - s + zeta 0) is the thickness of ice below the water level, where zeta is the sea level with respect to z = 0, and hatmathbfn = (hatn_x hatn_y) is the normal to the lateral boundary. ","category":"page"},{"location":"physics/governing_equations.html#Conservation-of-Mass","page":"Governing Equations","title":"Conservation of Mass","text":"","category":"section"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"For a given depth-averaged velocity mathbfbaru, accumulation rate a(xyt) (positive for ice gain), and basal melt rate m(xyt) (positive for ice loss), conservation of ice mass requires that the ice thickness h satisfies","category":"page"},{"location":"physics/governing_equations.html","page":"Governing Equations","title":"Governing Equations","text":"    beginequationlabelEmass_cons\r\n        fracpartial hpartial t = a - m - nabla left(h mathbfuright)\r\n    endequation","category":"page"},{"location":"numerics/numerical_grid.html#Numerical-Grid","page":"Numerical Grid","title":"Numerical Grid","text":"","category":"section"},{"location":"numerics/numerical_grid.html","page":"Numerical Grid","title":"Numerical Grid","text":"WAVI.jl solves the governing equations on a rectangular grid, with n_x grid cells in the x direction and n_y grid cells in the y direction. Ice thickness values h are defined at the cell centers (see figure) of grid cells, while velocity components baru and barv are defined along grid cell edges, and shear strain rates c = (partial u partial y + partial v  partial x)2 are stored at grid corners.","category":"page"},{"location":"numerics/numerical_grid.html","page":"Numerical Grid","title":"Numerical Grid","text":"<center><img src=\"../assets/grid-schematic.jpg\" alt=\"\" title=\"\" width=\"400\" height=\"400\" />\r\n<figcaption>Figure 1: Locations within grid cells that ice thickness $h$, velocity components $u$ and $v$, and shear strain rates $c = (\\partial u /\\partial y + \\partial v / \\partial x)/2$ are stored. </figcaption></center>","category":"page"},{"location":"numerics/numerical_grid.html","page":"Numerical Grid","title":"Numerical Grid","text":"The set of all such points at which the ice thickness is stored defines the h-grid. The u-grid, v-grid, and c-grid are defined analagously. Various different quantities are also stored on each of these grids, and used as part of the solution (see Fields for more information).","category":"page"},{"location":"numerics/numerical_grid.html","page":"Numerical Grid","title":"Numerical Grid","text":"Three dimensional fields used in the governing equations (e.g. viscosity) are stored h-grid points, extrapolated into the z direction. This grid is referred to as the sigma-grid.","category":"page"},{"location":"data_structure/fields.html#Fields","page":"Fields","title":"Fields","text":"","category":"section"},{"location":"data_structure/fields.html","page":"Fields","title":"Fields","text":"WAVI.jl stores information relating to the solutions on fields, which are stored in the model. Fields are organised based according to the different grids (HGrid, CGrid etc – see Grids) that quantities are stored. Note that all quantities here are set internally (i.e. they cannot be modified by the user). This page contains a full directory of the quantities defined on each of the Grids: HGrid, UGrid, VGrid, CGrid, SigmaGrid.","category":"page"},{"location":"data_structure/fields.html#HGrid","page":"Fields","title":"HGrid","text":"","category":"section"},{"location":"data_structure/fields.html","page":"Fields","title":"Fields","text":"The following quantities are stored in the HGrid structure within Fields (accessible via model.fields.gh.<field_name>):","category":"page"},{"location":"data_structure/fields.html","page":"Fields","title":"Fields","text":"h: Ice thickness\nb: Bed elevation\ns: Ice surface elevation (s = b + h)\ndhdt: Time rate of change of surface elevation\naccumulation: Ice accumulation rate (postive for mass added to the surface, negative for mass removed)\nbasal_melt: Melt rate applied to the base of the ice sheet (positive for mass removed from the base, negative for mass added).\ngrounded_fraction: Grid cell grounded fraction (zero in the shelf, one in the shelf and interpolated across the grounding line, see Seroussi et al. (2014))\nu: Depth average ice velocity in the x direction.\nv: Depth average ice velocity in the y direction.\nav_speed: Depth averaged ice speed \nus: Surface ice velocity in the x direction.\nvs: Surface ice velocity in the y direction.\nub: Base ice velocity in the x direction.\nvb: Base ice velocity in the y direction.\nbed_speed: Ice speed at the base\nweertman_c: Weertman C drag cofficient\nhaf: The height above floatation\ndsdh: Rate of change of surface elevation with respect to thickness change\nshelf_strain_rate: Strain rate computed using only longitudinal strain components\nβ: Raw multiplicative drag coefficient\nβeff: Effective multiplicative drag coefficient\nτbed: Ice stress at the bed.\nηav: Depth averaged viscosity\nquad_f1: F_1 computed from numerical quadrature\nquad_f2: F_2 computed from numerical quadrature\nmask: boolean matrix that defines the solution space","category":"page"},{"location":"data_structure/fields.html","page":"Fields","title":"Fields","text":"For convenience, various utility matrices and rheological operators are also stored on the HGrid:","category":"page"},{"location":"data_structure/fields.html","page":"Fields","title":"Fields","text":"crop: diagonal matrix with mask entries on the diagonal \nsamp: boolean matrix that takes full domain to the model domain\nspread: sparse form of the sampling matrix\ndneghηav: -h times bareta\ndimplicit: -rho_i times g times mathrmdt times mathrmdhmathrmds","category":"page"},{"location":"data_structure/fields.html#UGrid","page":"Fields","title":"UGrid","text":"","category":"section"},{"location":"data_structure/fields.html#VGrid","page":"Fields","title":"VGrid","text":"","category":"section"},{"location":"data_structure/fields.html#CGrid","page":"Fields","title":"CGrid","text":"","category":"section"},{"location":"data_structure/fields.html#SigmaGrid","page":"Fields","title":"SigmaGrid","text":"","category":"section"},{"location":"data_structure/model.html#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"data_structure/model.html","page":"Models","title":"Models","text":"A Model is a WAVI.jl strcutures that contain all the information about the current state, parameters, initial conditions, and process parametrizations. An instance of a Model contains the following fields:","category":"page"},{"location":"data_structure/model.html","page":"Models","title":"Models","text":"grid: an instance of a WAVI.jl Grid object, that stores information about the numerical grid.\nparams: an instance of a WAVI.jl Params object that stores phyiscal parameters that enter the model.\nsolver_params: an instance of a WAVI.jl SolverParams object that stores parameters relating to the numerical solution of the governing equations (see numerical implementation).\ninitial_conditions: an instance of a WAVI.jl InitialConditions object that stores initial data on the ice thickness, ice viscosity, ice temperature, and ice damage.\nfields: an instance of a WAVI.jl Fields structure that stores information relating to the current state of the model on the various grids used in the solution (see numerical implementation for more information on these grids)\nextra_physics: a dictionary that stores process parametrizations used in the ice sheet model (see process parametrizations for more information).","category":"page"},{"location":"data_structure/model.html#Model-Construction","page":"Models","title":"Model Construction","text":"","category":"section"},{"location":"data_structure/model.html","page":"Models","title":"Models","text":"A Model is constructed using the Model(;<kwargs>) constructor (a function that constructs an instance of a Model). Here <kwargs> is shorthand for keyword arguments, allow the Model to be configured, some are optional and others are not (see below):","category":"page"},{"location":"data_structure/model.html","page":"Models","title":"Models","text":"Model()","category":"page"},{"location":"data_structure/model.html#WAVI.Model-Tuple{}","page":"Models","title":"WAVI.Model","text":"Model(; <kwargs>)\n\nConstruct a WAVI.jl Model\n\nKeyword Arguments:\n\ngrid [required]: An instance of a WAVI.jl Grid object, which stores information about the numerical grid\nbed_elevation [required]: Bed elevation at grid points. Must have size grid.nx x grid.ny\nparams: An instant of a WAVI.jl Params object, which stores information on physical parameters\nsolver_params: An instant of a WAVI.jl Params object, which stores information on solver parameters\ninitial_conditions: An instant of a WAVI.jl InitialConditions object, which stores information on the initial thickness, temperature, viscosity, and damage\nmelt_rate: An instant of a WAVI.jl MeltRate object, which stores information on the melt rate parametrization\n\n\n\n\n\n","category":"method"},{"location":"data_structure/output_writing.html#Output-Writing","page":"Output Writing","title":"Output Writing","text":"","category":"section"},{"location":"data_structure/output_writing.html","page":"Output Writing","title":"Output Writing","text":"Parameters relating to writing solution data are stored in an OutputParams structure. Data is output as individual files at a user-specified interval, and may be zipped to a single file once the simulation has completed.","category":"page"},{"location":"data_structure/output_writing.html","page":"Output Writing","title":"Output Writing","text":"The key parameters, which are passed via keyword arguments in the OutputParams constructor, are as follows:","category":"page"},{"location":"data_structure/output_writing.html","page":"Output Writing","title":"Output Writing","text":"outputs: a named tuple that points to data fields to be output. Variable names used in the output are those specified in the named tuple. For example, to set the outputs to be the ice sheet thickness, named h, and the ice sheet surface elevation, named s, we would first instantiate a Model (here named model) and set outputs = (h = model.fields.gh.h, s = model.fields.gh.s).","category":"page"},{"location":"data_structure/output_writing.html","page":"Output Writing","title":"Output Writing","text":"note: Note\nIf only outputting a single field, you must include a comma so that Julia interprets it as a named tuple, e.g. outputs = (h = model.fields.gh.h,).","category":"page"},{"location":"data_structure/output_writing.html","page":"Output Writing","title":"Output Writing","text":"note: Note\nVariables named x, y, and TIME are reserved for the spatial and temporal dimensions and are therefore not permitted as variable names.","category":"page"},{"location":"data_structure/output_writing.html","page":"Output Writing","title":"Output Writing","text":"output_freq: the model time frequency with which the simulation is output. Note that WAVI works with the number of timesteps per output, calculated as floor(output_freq/dt) where dt is the simulation timestep. If output_freq is not an integer multiple of dt, this will introduce differences in the actual output frequency, and that specified by the user.","category":"page"},{"location":"data_structure/output_writing.html","page":"Output Writing","title":"Output Writing","text":"output_format specifies the file format that the solution are to be saved in. Currently only .jld2 and .mat file formats are supported. ","category":"page"},{"location":"data_structure/output_writing.html","page":"Output Writing","title":"Output Writing","text":"prefix specifies the prefix of solution files. Output files are saved as <prefix>_xxxxxxxxxx.jld where xxxxxxxxxx is the timestep number at which this solution was outputted, prepended with zeros to be ten digits in length. ","category":"page"},{"location":"data_structure/output_writing.html","page":"Output Writing","title":"Output Writing","text":"output_path specifies the path (relative or absolute) into which the solution is outputted. Note that if the specified path does not exist, outputs will be written to the local directory. ","category":"page"},{"location":"data_structure/output_writing.html","page":"Output Writing","title":"Output Writing","text":"zip_format specifies the format that solution files are zipped into. Currently WAVI.jl only supports zipping to an nc format. ","category":"page"},{"location":"data_structure/output_writing.html","page":"Output Writing","title":"Output Writing","text":"dump_vel is a shortcut to dump the velocity at the end of a simulation. This is an experimental feature, necessary for coupling WAVI to the MITgcm (see the MITgcm coupling tab).","category":"page"},{"location":"data_structure/melt_rate_models.html#Melt-Rate-Models","page":"Melt Rate Models","title":"Melt Rate Models","text":"","category":"section"},{"location":"data_structure/melt_rate_models.html","page":"Melt Rate Models","title":"Melt Rate Models","text":"WAVI.jl has a number of community melt rate parametrizations/models implemented and ready to use. Details of these models can be found on the melt rate physics page. This page provides a description of how to endow ice sheet models with a melt rate model/parametrization, as well as the interface of each of those that are implemented in WAVI.jl.","category":"page"},{"location":"data_structure/melt_rate_models.html#Adding-a-Melt-Rate-Parametrization-to-a-WAVI.jl-Model","page":"Melt Rate Models","title":"Adding a Melt Rate Parametrization to a WAVI.jl Model","text":"","category":"section"},{"location":"data_structure/melt_rate_models.html","page":"Melt Rate Models","title":"Melt Rate Models","text":"To add a melt rate parametrization to a WAVI.jl model, simply build your (ice sheet) Model and particular MeltRateModel, and use the add_melt_rate_model! function to glue them together. ","category":"page"},{"location":"data_structure/melt_rate_models.html","page":"Melt Rate Models","title":"Melt Rate Models","text":"This is best demonstrated by example: we first build a simple ice sheet model on a 20 x 20 grid, with a bed that is 50 m below sea level:","category":"page"},{"location":"data_structure/melt_rate_models.html","page":"Melt Rate Models","title":"Melt Rate Models","text":"grid = Grid(nx = 20, ny = 20)\r\nbed_elevation = 50.0 * ones(grid.nx, grid.ny)\r\nmodel = Model(grid = grid, bed_elevation = bed_elevation)","category":"page"},{"location":"data_structure/melt_rate_models.html","page":"Melt Rate Models","title":"Melt Rate Models","text":"We then build our melt rate model. In this example, a simple analytic parametrization of the melt rate that specifies the melt rate according to some user defined function (in this case the maximum of zero and the ice draft minus 100):","category":"page"},{"location":"data_structure/melt_rate_models.html","page":"Melt Rate Models","title":"Melt Rate Models","text":"function melt_function())\r\n    draft = -(918.0 / 1028.0) * h\r\n    m =  max.((-100 .- draft), 0)\r\n    return m\r\nend\r\narguments = (h = model.fields.gh.h,)\r\nmelt_rate_model = AnalyticMeltRate(melt_rate_function = melt_function, \r\n                                function_arguments = arguments)","category":"page"},{"location":"data_structure/melt_rate_models.html","page":"Melt Rate Models","title":"Melt Rate Models","text":"Finally, the ice sheet model is endowed with the melt rate mode:","category":"page"},{"location":"data_structure/melt_rate_models.html","page":"Melt Rate Models","title":"Melt Rate Models","text":"add_melt_rate_model!(model, melt_rate_model)","category":"page"},{"location":"data_structure/melt_rate_models.html","page":"Melt Rate Models","title":"Melt Rate Models","text":"Simulations that use this model will have evolve with melt rates specified according to the function melt_function.","category":"page"},{"location":"data_structure/melt_rate_models.html#Analytic-Melt-Rate-Parametrizations","page":"Melt Rate Models","title":"Analytic Melt Rate Parametrizations","text":"","category":"section"},{"location":"data_structure/melt_rate_models.html#Input-File-Melt-Rates","page":"Melt Rate Models","title":"Input File Melt Rates","text":"","category":"section"},{"location":"data_structure/melt_rate_models.html#Quadratic-Temperature-Melt-Rate-Model","page":"Melt Rate Models","title":"Quadratic Temperature Melt Rate Model","text":"","category":"section"},{"location":"data_structure/melt_rate_models.html","page":"Melt Rate Models","title":"Melt Rate Models","text":"A QuadraticMeltModel – the melt model used to implement the quadratic temperature melt rate parametrization is constructed using the QuadraticMeltModel(<kwargs>) constructor. ","category":"page"},{"location":"data_structure/melt_rate_models.html","page":"Melt Rate Models","title":"Melt Rate Models","text":"A QuadraticMeltModel accepts the following keyword arguments:","category":"page"},{"location":"data_structure/melt_rate_models.html","page":"Melt Rate Models","title":"Melt Rate Models","text":"h (required): array of ice thickness values at grid points\nmelt_partial_cell (default: false): specify whether to apply melt to partially floating cells or not.\nlambda_1 (default: -0.057): liquidus slope\nlambda_2 (default: 0.0832): liquidus intercept\nlambda_3 (default: 7.59e-4): liquidus pressure coefficient.\ngamma_T (default 99.32e-5): heat exchange velocity. Note that gamma_T is typically used as a tuning parameter, the default value is the tuned value from L Favier, N C Jourdain, A Jenkins, N Merino, G Durand, O Gagliardini, F Gillet-Chaulet, P Mathiot (2019).\nL (default 3.35e-5): latent heat of fusion\nrho_s (default 1028.0): sea water density\nrho_i (default 918.0): ice density\nc_p (default 3974.0): specific heat capacity of ocean\nS_0: far-field practical salinity profile (units: psu), passed to the constructor as a function of depth. The default is the 'warm0' profile used in L Favier, N C Jourdain, A Jenkins, N Merino, G Durand, O Gagliardini, F Gillet-Chaulet, P Mathiot (2019).\nT_0: far-field potential temperature profile (units: ^circC), passed to the constructor as a function of depth. The default is the 'warm0' profile used in L Favier, N C Jourdain, A Jenkins, N Merino, G Durand, O Gagliardini, F Gillet-Chaulet, P Mathiot (2019).","category":"page"},{"location":"data_structure/melt_rate_models.html#Plume-Emulator-Melt-Rate-Parametrization","page":"Melt Rate Models","title":"Plume Emulator Melt Rate Parametrization","text":"","category":"section"},{"location":"data_structure/melt_rate_models.html#PICO-Melt-Rate-Parametrization","page":"Melt Rate Models","title":"PICO Melt Rate Parametrization","text":"","category":"section"},{"location":"data_structure/melt_rate_models.html#PICOp-Melt-Rate-Parametrization","page":"Melt Rate Models","title":"PICOp Melt Rate Parametrization","text":"","category":"section"},{"location":"index.html#WAVI.jl-documentation","page":"Home","title":"WAVI.jl documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"WAVI.jl is an ice sheet model for everyone.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"It is fast and detailed enough for use in research, yet friendly enough for students and first time programmers.","category":"page"},{"location":"mitgcm_coupling.html#MITgcm-coupling","page":"MITgcm coupling","title":"MITgcm coupling","text":"","category":"section"},{"location":"mitgcm_coupling.html","page":"MITgcm coupling","title":"MITgcm coupling","text":"MITgcm coupling with WAVI is an experimental feature. Check back soon for more info!","category":"page"}]
}
